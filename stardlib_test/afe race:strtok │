STRTOK(3)                                                Linux Programmer's Manual                                               STRTOK(3)

NNAAMMEE
       strtok, strtok_r - extract tokens from strings

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttrriinngg..hh>>

       cchhaarr **ssttrrttookk((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_d_e_l_i_m));;

       cchhaarr **ssttrrttookk__rr((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_d_e_l_i_m,, cchhaarr ****_s_a_v_e_p_t_r));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssttrrttookk__rr(): _POSIX_C_SOURCE
           || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  ssttrrttookk()  function breaks a string into a sequence of zero or more nonempty tokens.  On the first call to ssttrrttookk(), the string
       to be parsed should be specified in _s_t_r.  In each subsequent call that should parse the same string, _s_t_r must be NULL.

       The _d_e_l_i_m argument specifies a set of bytes that delimit the tokens in the parsed string.  The caller may specify different strings
       in _d_e_l_i_m in successive calls that parse the same string.

       Each  call  to  ssttrrttookk() returns a pointer to a null-terminated string containing the next token.  This string does not include the
       delimiting byte.  If no more tokens are found, ssttrrttookk() returns NULL.

       A sequence of calls to ssttrrttookk() that operate on the same string maintains a pointer that determines the point from which  to  start
       searching for the next token.  The first call to ssttrrttookk() sets this pointer to point to the first byte of the string.  The start of
       the next token is determined by scanning forward for the next nondelimiter byte in _s_t_r.  If such a byte is found, it  is  taken  as
       the  start  of the next token.  If no such byte is found, then there are no more tokens, and ssttrrttookk() returns NULL.  (A string that
       is empty or that contains only delimiters will thus cause ssttrrttookk() to return NULL on the first call.)

       The end of each token is found by scanning forward until either the next delimiter byte is found or until the terminating null byte
       ('\0')  is  encountered.  If a delimiter byte is found, it is overwritten with a null byte to terminate the current token, and ssttrr‐‐
       ttookk() saves a pointer to the following byte; that pointer will be used as the starting point when searching for the next token.  In
       this case, ssttrrttookk() returns a pointer to the start of the found token.

       From the above description, it follows that a sequence of two or more contiguous delimiter bytes in the parsed string is considered
       to be a single delimiter, and that delimiter bytes at the start or end of the string are ignored.   Put  another  way:  the  tokens
       returned  by  ssttrrttookk()  are always nonempty strings.  Thus, for example, given the string "_a_a_a_;_;_b_b_b_,", successive calls to ssttrrttookk()
       that specify the delimiter string "_;_," would return the strings "_a_a_a" and "_b_b_b", and then a null pointer.

       The ssttrrttookk__rr() function is a reentrant version ssttrrttookk().  The _s_a_v_e_p_t_r argument is a pointer to  a  _c_h_a_r _*  variable  that  is  used
       internally by ssttrrttookk__rr() in order to maintain context between successive calls that parse the same string.

       On  the  first call to ssttrrttookk__rr(), _s_t_r should point to the string to be parsed, and the value of _s_a_v_e_p_t_r is ignored.  In subsequent
       calls, _s_t_r should be NULL, and _s_a_v_e_p_t_r should be unchanged since the previous call.

       Different strings may be parsed concurrently using sequences of calls to ssttrrttookk__rr() that specify different _s_a_v_e_p_t_r arguments.

RREETTUURRNN VVAALLUUEE
       The ssttrrttookk() and ssttrrttookk__rr() functions return a pointer to the next token, or NULL if there are no more tokens.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌───────────┬───────────────┬───────────────────────┐
       │IInntteerrffaaccee  │ AAttttrriibbuuttee     │ VVaalluuee                 │
       ├───────────┼───────────────┼───────────────────────┤
       │ssttrrttookk()   │ Thread safety │ MT-Unsafe race:strtok │
       ├───────────┼───────────────┼───────────────────────┤
       │ssttrrttookk__rr() │ Thread safety │ MT-Safe               │
       └───────────┴───────────────┴───────────────────────┘
CCOONNFFOORRMMIINNGG TTOO
       ssttrrttookk()
              POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.

       ssttrrttookk__rr()
              POSIX.1-2001, POSIX.1-2008.

BBUUGGSS
       Be cautious when using these functions.  If you do use them, note that:

       * These functions modify their first argument.

       * These functions cannot be used on constant strings.

       * The identity of the delimiting byte is lost.

       * The ssttrrttookk() function uses a static buffer while parsing, so it's not thread safe.  Use ssttrrttookk__rr() if this matters to you.

EEXXAAMMPPLLEE
       The program below uses nested loops that employ ssttrrttookk__rr() to break a string into a two-level hierarchy of tokens.  The first  com‐
       mand-line  argument  specifies the string to be parsed.  The second argument specifies the delimiter byte(s) to be used to separate
       that string into "major" tokens.  The third argument specifies the delimiter byte(s) to be used to separate the "major" tokens into
       subtokens.

       An example of the output produced by this program is the following:

           $ ..//aa..oouutt ''aa//bbbbbb//////cccc;;xxxxxx::yyyyyy::'' ''::;;'' ''//''
           1: a/bbb///cc
                    --> a
                    --> bbb
                    --> cc
           2: xxx
                    --> xxx
           3: yyy
                    --> yyy

   PPrrooggrraamm ssoouurrccee

       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       int
       main(int argc, char *argv[])
       {
           char *str1, *str2, *token, *subtoken;
           char *saveptr1, *saveptr2;
           int j;

           if (argc != 4) {
               fprintf(stderr, "Usage: %s string delim subdelim\n",
                       argv[0]);
               exit(EXIT_FAILURE);
           }

           for (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
               token = strtok_r(str1, argv[2], &saveptr1);
               if (token == NULL)
                   break;
               printf("%d: %s\n", j, token);

               for (str2 = token; ; str2 = NULL) {
                   subtoken = strtok_r(str2, argv[3], &saveptr2);
                   if (subtoken == NULL)
                       break;
                   printf(" --> %s\n", subtoken);
               }
           }

           exit(EXIT_SUCCESS);
       }

       Another example program using ssttrrttookk() can be found in ggeettaaddddrriinnffoo__aa(3).

SSEEEE AALLSSOO
       iinnddeexx(3), mmeemmcchhrr(3), rriinnddeexx(3), ssttrrcchhrr(3), ssttrriinngg(3), ssttrrppbbrrkk(3), ssttrrsseepp(3), ssttrrssppnn(3), ssttrrssttrr(3), wwccssttookk(3)

CCOOLLOOPPHHOONN
       This  page is part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs,
       and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                             2017-09-15                                                       STRTOK(3)
